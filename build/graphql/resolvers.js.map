{"version":3,"sources":["../../src/graphql/resolvers.js"],"names":["require","resolvers","Query","user","User","find","users","console","log","name","getContact","Contact","contact","Mutation","signup","root","args","ctx","info","findOne","email","existUser","Error","bcrypt","hash","password","hashPassword","save","result","login","compare","pwdMatch","token","jwt","sign","userId","_id","expiresIn","tokenExpire","addPost","Authorization","req","get","replace","AuthenticationError","verify","verifiedPlayLoad","decode","payload","post","Post","title","description","creator","id","findById","addContact","mobile"],"mappings":"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","sourcesContent":["import bcrypt from \"bcrypt\";\r\nimport User from \"./../models/users\";\r\nimport Post from './../models/posts';\r\nimport Contact from './../models/contactus';\r\nimport jwt from \"jsonwebtoken\";\r\nrequire(\"@babel/polyfill\");\r\n\r\nexport const resolvers = {\r\n    Query:{\r\n        user: async () =>{\r\n            const users = await User.find({});\r\n            console.log(users.name);\r\n            return users;\r\n        },\r\n        getContact : async () =>{\r\n            const contact = await Contact.find({});\r\n            return contact; \r\n        }\r\n    },\r\n    Mutation:{\r\n        signup: async (root, args, ctx, info) =>{\r\n            const existUser = await User.findOne({ email: args.email });\r\n            if (existUser)  throw new Error('User exists already.');\r\n            \r\n            const hashPassword = await bcrypt.hash(args.password, 12);\r\n            const user = new User({\r\n                name: args.name,\r\n                email: args.email,\r\n                password: hashPassword\r\n              });\r\n              const result = await user.save();\r\n            return result;\r\n        },\r\n\r\n        login: async (root, args, ctx, info) =>{\r\n            const user = await User.findOne({ email: args.email });\r\n            if (!user)  throw new Error('User does not exist!');\r\n            \r\n            const pwdMatch = await bcrypt.compare(args.password, user.password);\r\n            console.log(pwdMatch,args.password);\r\n            if(!pwdMatch) throw new Error('Incorrect Credentials');\r\n\r\n            const token = jwt.sign(\r\n                { userId: user._id, email: user.email },\r\n                'secretkey',\r\n                {\r\n                  expiresIn: '1h'\r\n                }\r\n              );\r\n\r\n              return {token: token, tokenExpire: 1 };\r\n        },\r\n\r\n        addPost: async (root, args, ctx, info) =>{\r\n            console.log(ctx);\r\n            const Authorization = ctx.req.get(\"Authorization\");\r\n            console.log(Authorization);\r\n            const token = Authorization? Authorization.replace(\"Bearer \", \"\") :  new AuthenticationError(\"Auth Token Missing\");\r\n\r\n            const verifiedPlayLoad = await jwt.verify(token, 'secretkey');\r\n            if(!verifiedPlayLoad) throw new AuthenticationError(\"Unauthenticated\");\r\n\r\n            const payload = await jwt.decode(token);\r\n            console.log(payload);\r\n\r\n            const post = new Post({\r\n                title: args.title,\r\n                description: args.description,\r\n                creator: payload.id,\r\n            });\r\n\r\n            const result = await post.save();\r\n            const creator = await User.findById(req.userId);\r\n\r\n            if (!creator) {\r\n                throw new Error('User not found.');\r\n            }\r\n            await creator.save();\r\n\r\n            return post;\r\n        },\r\n\r\n        addContact: async (root, args, ctx, info) =>{\r\n            const contact = new Contact({\r\n                name: args.name,\r\n                mobile: args.mobile,\r\n                email: args.email,\r\n                description: args.description\r\n            })\r\n            const result = contact.save();\r\n\r\n            return result;\r\n        }\r\n    }\r\n};\r\n\r\n"],"file":"resolvers.js"}